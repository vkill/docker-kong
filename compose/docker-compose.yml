version: '3'

services:
  kong:
    image: "${KONG_DOCKER_TAG:-kong:0.14-alpine}"
    command: kong start --run-migrations
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_CASSANDRA_CONTACT_POINTS: kong-database
      KONG_PG_DATABASE: ${KONG_POSTGRES_DATABASE:-kong}
      KONG_PG_USER: ${KONG_POSTGRES_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_POSTGRES_PASSWORD:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001, 0.0.0.0:8444 ssl'
    restart: always
    pid: host
    ports:
      - "${KONG_PROXY_PORT:-80}:8000/tcp"
      - "${KONG_PROXY_SSL_PORT:-443}:8443/tcp"
      - "${KONG_ADMIN_PORT:-8001}:8001/tcp"
      - "${KONG_ADMIN_SSL_PORT:-8444}:8444/tcp"
    networks:
      - kong

  kong-database:
    image: "${KONG_POSTGRES_DOCKER_TAG:-postgres:11.1-alpine}"
    volumes:
      - kong_postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${KONG_POSTGRES_DATABASE:-kong}
      POSTGRES_USER: ${KONG_POSTGRES_USER:-kong}
      POSTGRES_PASSWORD: ${KONG_POSTGRES_PASSWORD:-kong}
      PGDATA: /var/lib/postgresql/data/db
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_POSTGRES_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: always
    pid: host
    networks:
      - kong

  kong-dashboard:
    image: "${KONG_DASHBOARD_DOCKER_TAG:-pgbi/kong-dashboard:v3}"
    command: start --kong-url http://kong:8001 --basic-auth ${KONG_DASHBOARD_USER:-kong}=${KONG_DASHBOARD_PASSWORD:-kong}
    restart: always
    pid: host
    ports:
      - "${KONG_DASHBOARD_PORT:-8080}:8080/tcp"
    networks:
      - kong

volumes:
  kong_postgres_data:

networks:
  kong:
